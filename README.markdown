# Служба чата в реальном времени на gRPC

## Обзор
Этот проект реализует службу чата в реальном времени с использованием gRPC на Python. Поддерживаются создание комнат чата, просмотр списка комнат, присоединение к комнатам с потоковой передачей сообщений, отправка сообщений через двунаправленную потоковую передачу, получение истории сообщений и присоединение к конкретным комнатам по их ID. Пользователи вводят имя при запуске, взаимодействуют через меню, а полная история комнаты транслируется всем пользователям в комнате после каждого нового сообщения.

## Сценарий
Служба позволяет нескольким пользователям создавать и присоединяться к комнатам чата, отправлять сообщения в реальном времени и просматривать обновленную историю комнаты после каждого сообщения. Интерфейс клиента с меню предотвращает автоматическое создание комнат, и пользователи остаются в комнате, пока явно не выйдут.

## Требования
- Python 3.8+
- pip для установки зависимостей

## Установка
1. Установите зависимости:
```bash
pip install grpcio grpcio-tools
```

2. Сгенерируйте Python-код gRPC из proto-файла:
```bash
python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. chat.proto
```

## Запуск службы
1. Запустите сервер:
```bash
python server.py
```

2. В отдельном терминале запустите клиент:
```bash
python client.py
```

## Пример использования
1. **Запуск клиента и ввод имени пользователя**:
   - Запустите `client.py` и введите имя пользователя (например, `Алиса`).
   - Вывод: После ввода имени появляется меню.

2. **Создание комнаты**:
   - Выберите `1`, введите название комнаты (например, `Общий чат`).
   - Вывод: `Создана комната: Общий чат (f7e2b1a0-8c3a-4f6a-9b7c-1234567890ab)`
   - Нажмите Enter, чтобы вернуться в меню.

3. **Просмотр списка комнат**:
   - Выберите `2`.
   - Вывод:
     ```
     Доступные комнаты:
     - Общий чат (f7e2b1a0-8c3a-4f6a-9b7c-1234567890ab)
     ```

4. **Присоединение к комнате**:
   - Выберите `3`, введите ID комнаты.
   - Вывод: Отображается история комнаты при присоединении, обновляется после каждого сообщения.
   - Отправьте сообщение (например, `Привет от Алисы`).
   - Вывод (для всех клиентов в комнате):
     ```
     === История комнаты f7e2b1a0-8c3a-4f6a-9b7c-1234567890ab ===
     [1697051234] Алиса: Привет от Алисы
     ```
   - Введите `quit`, чтобы вернуться в меню.

5. **Получение истории**:
   - Выберите `4`, введите ID комнаты.
   - Вывод:
     ```
     История комнаты f7e2b1a0-8c3a-4f6a-9b7c-1234567890ab:
     [1697051234] Алиса: Привет от Алисы
     ```

6. **Выход**:
   - Выберите `5`, чтобы выйти из клиента.

## Тестирование службы
1. **Настройка**:
   - Установите зависимости и сгенерируйте gRPC-код, как описано выше.
   - Убедитесь, что файлы `chat.proto`, `server.py` и `client.py` находятся в одной директории.

2. **Тест с одним клиентом**:
   - Запустите сервер: `python server.py`
   - Запустите клиент: `python client.py`
   - Введите имя пользователя `Алиса`.
   - Создайте комнату, просмотрите список комнат, присоединитесь к комнате, отправьте сообщение и получите историю.
   - Убедитесь, что меню сохраняется после каждого действия, кроме присоединения к комнате, где вы остаетесь, пока не введете `quit`.

3. **Тест с несколькими клиентами**:
   - Запустите сервер.
   - Запустите два клиента: `python client.py`
   - **Клиент 1 (Алиса)**:
     - Введите имя пользователя `Алиса`.
     - Создайте комнату (например, `Общий чат`) и присоединитесь к ней.
     - Отправьте сообщение (например, `Привет от Алисы`).
   - **Клиент 2 (Боб)**:
     - Введите имя пользователя `Боб`.
     - Просмотрите список комнат, присоединитесь к той же комнате по ID.
     - Убедитесь, что история показывает сообщение Алисы.
     - Отправьте сообщение (например, `Привет от Боба`).
     - Подтвердите, что оба клиента отображают обновленную историю:
       ```
       === История комнаты f7e2b1a0-8c3a-4f6a-9b7c-1234567890ab ===
       [1697051234] Алиса: Привет от Алисы
       [1697051235] Боб: Привет от Боба
       ```

4. **Тест имени пользователя**:
   - Запустите клиент, введите пустое имя пользователя и убедитесь, что он завершает работу с ошибкой.
   - Используйте разные имена пользователей, чтобы убедиться, что сообщения правильно привязаны к авторам.

## Примечания
- Сервер транслирует полную историю комнаты после каждого сообщения.
- Пользователи остаются в комнате, пока не введут `quit`, после чего возвращаются в меню.
- Для тестирования нескольких клиентов запустите `client.py` в нескольких терминалах.

## Дополнительные возможности
- **Сохранение данных**: База данных SQLite для комнат и сообщений.
- **Потоковая передача**: Потоковая передача на стороне сервера (JoinRoom) и двунаправленная потоковая передача (SendMessage).